---
# this yaml file contains the settings used for the knot density experiment

# general parameters
device: "cuda:0" # device to run the experiment on
results_dir: "test_with_fixed_K4_M8_N16_rlista_smooth_random_k_3" 
seed: 0 # seed for reproducibility
max_nr_of_experiments: 1 # maximum number of experiments to run

# we want to run the experiment in different contexts of dimension sizes and sparsity levels of x
# y dimension M, x dimension N, sparsity in x of K, each described by a range
# we also have some noise in the data according to y=Ax+noise with the noise~N(0, noise_std**2)
data_that_varies:
  K:
    min: 4
    max: 4
  M:
    min: 8
    max: 8
  N:
    min: 16
    max: 16

data_that_stays_constant:
  x_magnitude: [1,2]
  noise_std: 0.125
  x_magnitude_ood: [3,6]
  noise_std_ood: 0.25

# support accuracy
support_accuracy_nr_points_to_use: 2048 

# ISTA parameters
ISTA:
  nr_folds: 128
  mu:
    min: 0.1
    max: 2
    nr_points: 20
  lambda:
    min: 0.05
    max: 1
    nr_points: 20
  nr_points_to_use: 4096
  weighting_for_first_fold: 1 # the first fold is weighted by this factor, increasing to the last fold, which is always weighted by 1 (if 1, all folds are equally weighted)

# LISTA parameters (Learned ISTA)
LISTA:
  nr_folds: 128
  batch_size: 64
  nr_of_batches: 8192 #8192
  learning_rate: 0.01
  weighting_for_first_fold: 0.01 # the first fold is weighted by this factor, increasing to the last fold, which is always weighted by 1 (if 1, all folds are equally weighted)
  patience: 1024

# RLISTA parameters (Regularized - Learned - ISTA)
RLISTA:
  nr_folds: 128
  batch_size: 64
  nr_of_batches: 8192 #8192
  learning_rate: 0.01
  weighting_for_first_fold: 0.01 # the first fold is weighted by this factor, increasing to the last fold, which is always weighted by 1 (if 1, all folds are equally weighted)
  patience: 1024
  regularization:
    nr_paths: 1
    anchor_point_std: 1
    nr_points_along_path: 1024 # 2^9  , 2^14
    path_delta: 0.01           # 0.01 , 0.001
    type: smooth_jacobian # smooth_jacobian, or tie_weights, or tv_jacobian
    weight: 0.1           # 1              , or 2          , or 100

# Path parameters
Path:
  nr_paths: 1 # number of paths to generate
  anchor_point_std: 1 # standard deviation of the anchor points, where the path will bounce between
  nr_points_along_path: 1048576 # 2^20
  path_delta: 0.001

# hyperplane parameters
Hyperplane:
  enabled: True # bool to decide if we want to perform the hyperplane experiment
  nr_points_along_axis: 1024 # number of points to sample along the axis
  indices_of_projection: [~,0,1] # The indices of the anchor points, aka, which k-sparse vector to project onto. 
                                 #A none means the origin, a 0 means x=[1,0,0,0,..] and a 1 means x=[0,1,0,0,..], and so on.
                                 # for now, this only support with None always as the first element
  magnitude: 1.5     # the magnitude to choose for the first anchor points, ie, x = x * magnitude
  magnitude_ood: 4.5 # the magnitude to choose for the second anchor points, ie, x = x * magnitude_ood
  margin: 1.5        # the additional margin to extend the hyperplane by
  make_gif: True    # bool to decide if we want to make a gif of the hyperplane experiment